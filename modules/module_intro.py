import streamlit as st

def st_function():
    st.title("Introduccion")

    st.header("2018")
    parrafo_2018 = '''
    En 2018 **decid√≠ que quer√≠a hacer algo especial con mi cuenta de Instagram**,
    no soy fan de que haya fotos mias en internet, y me aburr√≠a publicar fotos y escribir comentarios en publicaciones.

    Eureka, pens√©; ‚Äúestudio GIC, **podr√≠a programar un bot que haga todas esas funciones**, y solo usar Instagram para cotillear las vidas de mis amigos‚Äù. 
    En un fin de semana **hice un peque√±o bot con python y selenium** que comentaba "üêíüêíüêí" en las fotos de mis mejores amigos.

    Estaba orgulloso y emocionado de descubrir mi nuevo superpoder, ten√≠a ganas de m√°s.

    Pero hubo un percance, no pasaron ni 5 minutos y **instagram bloqueo mi cuenta hasta que resolvera un captcha**;
    y mi bot, muy lejos de ser una obra de arte, encontr√≥ un error y par√≥.

    **‚Äú¬øC√≥mo habra detectado instagram mi bot tan rapido?‚Äù** me pregunte.
    '''
    st.markdown(parrafo_2018)

    st.header("El problema")
    parrafo_problema = '''
    En Julio de 2020 **los ingenieros de Twitter** escribieron un art√≠culo en su blog *[1]*
     detallando c√≥mo **hab√≠an detectado 32,242 cuentas falsas** dedicadas a propagar desinformaci√≥n.  

    Estas cuentas fueron inhabilitadas por ir contra su pol√≠tica de manipulaci√≥n de la plataforma *[2]*,
    ya que **constitu√≠an una acci√≥n coordinada para modificar la opini√≥n p√∫blica**.  

    // Talk about twitter measures

    Mientras que **nuestro bot** que comenta monitos **no pretende modificar la opini√≥n de nuestros seguidores**, 
    **las medidas** para detecci√≥n de bots **complican considerablemente el desarrollo de bots benignos**.
    '''
    st.markdown(parrafo_problema)

    st.header("Verificacion Intrusiva")
    parrafo_intrusiva = '''
    Un captcha es una prueba de turing automatizada, es decir, 
    una prueba que **un humano puede realizar f√°cilmente, pero que a un ordenador le es casi imposible**. 

    Las √∫ltimas versiones de **ReCaptcha *[3]* usan detecci√≥n de objetos en im√°genes**, un problema que a las m√°quinas a√∫n le cuesta mucho.
    Mientras que es una soluci√≥n casi infalible, 
    **presentar a todos los usuarios con puzzles cada vez que quieren usar nuestro servicio es una forma asegurada de aburrirlos**.

    A estas pruebas de verificaci√≥n que suponen una interrupci√≥n del servicio habitual se llaman **pruebas de verificaci√≥n intrusivas**.
    '''
    st.markdown(parrafo_intrusiva)

    st.header("Verificacion no Intrusiva")
    parrafo_no_intrusiva = '''
    Si fu√©semos una red social, **nuestro objetivo es que nuestros usuarios pasen el mayor tiempo posible usando nuestros servicios**, 
    por lo que nos interesan medidas de detecci√≥n de bots que sean **invisibles a nuestros usuarios**.  
    Esto se llama **verificaci√≥n no intrusiva**.

    **En este trabajo trataremos s√≥lo con verificaci√≥n no intrusiva**. Dividiremos las diferentes t√©cnicas en:

    1. Aquellas que **observan el input de perif√©ricos** al usar la plataforma.
    2. Aquellas que **observan la huella digital** del dispositivo usado.
    3. Aquellas que **estudian los gustos y patrones temporales**.
    4. **Denuncias de contenido sospechoso** por parte de usuarios

    Para cada medida **hemos estudiado su funcionamiento**, y **hemos generado una soluci√≥n simple en python**, para facilitar el dise√±o de bots *benignos*.

    Esta p√°gina es una demostraci√≥n visual e interactiva de las contramedidas generadas. 

    ‚¨ÖÔ∏è‚¨ÖÔ∏è‚¨ÖÔ∏è Para continuar selecciona una seccion en el menu de la izquierda.
    '''
    st.markdown(parrafo_no_intrusiva)

    st.markdown('---')
    citations = {
        1:"https://blog.twitter.com/en_us/topics/company/2020/information-operations-june-2020.html",
        2:"https://help.twitter.com/en/rules-and-policies/platform-manipulation",
        3:"https://www.google.com/recaptcha/about/"
    }

    footer = ""
    for k, v in citations.items():
        footer += f"[{k}] {v}\n"
    st.text(footer)